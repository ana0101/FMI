13.
Descrieţi pe scurt caracteristicele fiecăreia și diferențele dintre transmiterea parametrilor unei funcții prin pointer, respectiv prin referință. 

-sintaxa declaratie functie + apel functie pt pointer si referinta 0.2p
-se modifica parametrul actual transmis prin pointer sau referinta 0.1p
-nu se copiaza obiectul (nu se apeleaza constructorul de copiere) 0.1p
-permite mecanismul metodelor virtuale 0.1p
-accesare directa (referinta) si prin dereferentiere (pointer) 0.1
-definitie pointer si referinta 0.1p
-transmitere prin valoare (pointer) cu copierea pointerului pe stiva si transmitere alt nume (referinta) 0.1

in caz ca nu apare nici una din cele de mai sus:

-referintele nu pot fi nule , pointerii pot fi nuli 0.1
-referintele nu isi schimba zona referita, pointerii si-o pot schimba 0.1

- sintaxa:
void f(int* p, int& r) {
	(*p) ++;
	r ++;
}
int main() {
	int x = 1, y = 2;
	f(&x, y);
	cout << x << y;
	return 0;
}


14.
Descrieți pe scurt supraîncărcarea operatorilor unari (sintaxă, exemple, particularități).
- pot fi supraincarcati fie ca metode membre fie ca functii prieten

class A {
	int x;
public:
	A(): x(1) {}

	// ++ prefix ca metoda membra
	A& operator++() {
		this->x ++;
		return *this;
	}
	
	// ++ prefix ca metoda friend
	friend A& operator++(A& obj) {
		obj.x ++;
		return obj;
	}
	
	// ++ postfix ca metoda membra
	A operator++(int y) {
		A a = *this;
		this->x ++;
		return a;
	}
	
	// ++ postfix ca metoda friend
	friend A operator++(A& obj, int y) {
		A a = obj;
		obj.x ++;
		return a;
	}

	// operatorul - ca metoda membra
	A operator-() {
		A a = *this;
		a.x = - a.x;
		return a;
	}

	// operatorul - ca metoda friend
	friend A operator-(A& obj) {
		A a = obj;
		a.x = - a.x;
		return a;
	}

	friend ostream& operator<<(ostream& out, const A& obj) {
		out << obj.x << "\n";
		return out;
	}
};

int main() {
	A a;
	cout << -a;
	cout << a;
	cout << a++ << ++a;
}		


15.
Descrieţi pe scurt cum se poate realiza conversia de la un tip de date de bază la tipul definit de o clasă nouă 
(sintaxă, utilizare, particularități, exemplu).

-constructor cu un parametru de tip de baza la clasa noua 0.1 + sintaxa 0.1
-operator cast dintr-o clasa spre clasa noua 0.1 + sintaxa 0.1
-operator = cu un parametru de tipul de baza, in clasa noua 0.1 + sintaxa 0.1
-utilizare - instructiunea care face sa se execute conversia 0.1
-exemplu - care sa completeze campuri in clasa noua 0.1

daca nu apar cele de mai sus: (desi face coversia de pointeri sau referinte!)
-dynamic_cast 0.1 + sintaxa corecta 0.1

class A {
	int x;
public:
	A(int y = 0): x(y) {}
	
	A& operator=(int y) {
		this->x = y;
		return *this;
	}

	friend ostream& operator<<(ostream& out, const A& obj) {
		out << obj.x << "\n";
		return out;
	}
};

int main() {
	A a1(2);
	cout << a1;
	A a2 = 2;
	cout << a2;
	return 0;
}


16.
Descrieţi pe scurt utilizarea funcțiilor inline (recomandări, exemple,  particularități).
- C++ provides inline functions to reduce the function call overhead. 
An inline function is a function that is expanded in line when it is called. 
When the inline function is called whole code of the inline function gets inserted or 
substituted at the point of the inline function call. This substitution is performed by
the C++ compiler at compile time. An inline function may increase efficiency if it is small.
- sunt o sugestie pt compilator 
- compilatorul poate sa ignore aceasta cerere
- pot fi explicit inline sau implicit inline
a. nu sunt apelate efectiv, sunt similare macrodefinitiilor – 0.1
b. pot fi declarate explicit prin cuvântul cheie inline , sau implicit când se definesc în clasa – 0.1
c. nu se pot folosi structurile repetitive într-o funcție inline +functiile recursive nu pot fi inline – 0.1
d. dezavantaj – cod mare prin duplicare, deci se recomanda funcții mici – 0.1
e. exemple inline explicit și implicit – 0.1

- exemplu:
#include <iostream>
using namespace std;

class A {
	int x;
public:
	A(): x(1) {}

	inline void f();	// explicit inline
	void g() {		// implicit inline
		cout << "g\n";
	}

	friend ostream& operator<<(ostream& out, const A& obj) {
		out << obj.x << "\n";
		return out;
	}
};

void A::f() {
	cout << "f\n";
}

int main() {
	A a;
	a.f();
	a.g();
	return 0;
}


17.
Descrieţi pe scurt trei moduri prin care se poate schimba starea obiectului dintr-o funcție de instanță constantă.
- const_cast - face ca variablia sa nu mai fie const si poate fi schimbata


18.
Descrieţi din punctul de vedere al programării OOP o clasă care nu poate fi instanţiată decât o singură dată 
(definiție, utilizare, proprietǎţi, exemplu).
- singleton
- exemplul cu site-ul: tot cere conexiuni, daca ii face conexiuni noi => crash
- clasa meniu - nu e nevoie decat de unul singur
spus (singleton, design pattern creational), 0.1
pentru constructor privat ca sa se controleze instantierea din afara clasei,  0.1 
funcție statică de creare obiect/verificare 0.1
alocare dinamică plus pointer sau referinta statica 0.1
dat exemplu de utilizare: 0.1
prostii -0.1 pe prostie
nedefinit pointerul static in afara clasei -0.1
- exemplu:

class Meniu {
	int x;
	static Meniu* meniu;	// pointer catre instanta
	static int nr;	// tinem minte de cate ori am dat instanta
	Meniu(): x(0) {}	// constructor private
	Meniu(const Meniu& obj) = delete;	// stergem constructorul de copiere
	Meniu& operator=(const Meniu& obj) = delete;	// stergem operatorul =
	
public:
	static Meniu* getMeniu() {	// returneaza aceeasi instanta
		if (meniu == NULL)
			meniu = new Meniu();
		nr ++;
		return meniu;
	}
	
	~Meniu() {
		nr --;
		if (nr == 0) {
			if (meniu != NULL)
				delete meniu;
		}
	}
};
		
Meniu* Meniu::meniu = NULL;
int Meniu::nr = 0;

int main() {
	Meniu* meniu = meniu->getMeniu();
	return 0;
}

