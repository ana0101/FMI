T1) Am definita clasa Irat de numere irationale (cu parte reala si parte imaginara). 
Instantiez obiectele x, y, z de acest fel. Ce trebuie facut ca bucata de cod urmatoare sa compileze:
y=2*x;
x=x+1;
z=y/2;
descrierea conceptului/conceptelor, sintaxa, proprietati, restrictii.

- supraincarcarea operatorilor *, +, /
friend Irat& operator*(int x, Irat& obj) {
    obj.r = x * obj.r;
    obj.i = x * obj.i;
    return obj;
}

Irat& operator+(int x) {
    this->r = x + this->r;
    this->i = x + this->i;
    return *this;
}

Irat& operator/(int x) {
    if (x != 0) {
        this->r = this->r / x;
        this->i = this->i / x;
    }
    return *this;
}


T2) Dati cat mai multe variante de a se modifica starea (variabilele de instanta) unui obiect constant care apeleaza o functie constanta.

- const_cast - face ca o variabila const sa poata fi schimbata
#include <iostream>
using namespace std;
  
class student
{
private:
    int roll;
public:
    // constructor
    student(int r):roll(r) {}
  
    // A const function that changes roll with the help of const_cast
    void fun() const
    {
        ( const_cast <student*> (this) )->roll = 5;
    }
  
    int getRoll()  { return roll; }
};
  
int main(void)
{
    student s(3);
    cout << "Old roll number: " << s.getRoll() << endl;
  
    s.fun();
  
    cout << "New roll number: " << s.getRoll() << endl;
  
    return 0;
}

- cast away constness - procesul ca o variabila const sa nu mai fie const


- mutable - se pune la declarare in clasa si inseamna ca variablia respectiva poate fi schimbata chiar si in metode const
#include <bits/stdc++.h>
#include <string.h>
using namespace std;
 
// Customer Class
class Customer {
    
    // class Variables
    string name;
    mutable string placedorder;
    int tableno;
    mutable int bill;
 
    // member methods
public:
   
    
    // constructor
    Customer(string s, string m, int a, int p)
    {
        name= s;
        placedorder=m;
        tableno = a;
        bill = p;
    }
     
    // to change the place holder
    void changePlacedOrder(string p) const
    {
        placedorder=p;
    }
   
    // change the bill
    void changeBill(int s) const { bill = s; }
   
    // to display
    void display() const
    {
        cout << "Customer name is: " << name << endl;
        cout << "Food ordered by customer is: "
             << placedorder << endl;
        cout << "table no is: " << tableno << endl;
        cout << "Total payable amount: " << bill << endl;
    }
};
 
// Driver code
int main()
{
    const Customer c1("Pravasi Meet", "Ice Cream", 3, 100);
    c1.display();
    c1.changePlacedOrder("GulabJammuns");
    c1.changeBill(150);
    c1.display();
    return 0;
}


- volatile - spune compilatorului ca variablia poate fi schimbata oricand - ca sa nu faca prostii la optimizare



T3) Cum functioneaza operatorul de atribuire implicit (dat de compilator), al unei clase compuse 
(cu date dintr-o clasa de baza), si cum trebuie scris de programator, operatorul de atribuire 
pentru aceeasi clasa compusa? Sintaxa.

- copiaza bit cu bit
- pt datele membre de tip clasa baza cheama operatorul de atribuire din clasa aia
- trebuie suprascris cand avem alocare dinamica
- suprascris nu cheama automat op de atribuire pt date, il chemam manual

class A {
	int x;
};

class B {
	A a;
	int y;
public:
	B& operator=(const B& obj) {
		this->a = obj.a;
		this->y = obj.y;
		return *this;
	}
};


T4) Descrieti specializarea explicita pentru sabloane (template-uri) de clase. 
Sintaxa, proprietati, observatii.

Descriere:
- e specifica pt anumite tipuri de date
- trebuie rescrise metodele pt ca nu se pastreaza nimic din clasa template originala
- e prioritara fata de template pt instantiere cu acelasi tip de data

Sintaxa:
template<>
return_type function_name(par1_type par1, type_par2 par2, ..., type_parn parn) {
	...
}

Exemplu:

template <class T, class U>
T minim(T x, U y) {
	if (x < y)
        return x;
    return y;
}

template <>
string minim(string x, string y) {
	if(x.length() < y.length())
        return x;
    return y;
}

int main() {
    cout << minim(3.2, 1) << "\n";
    string s1 = "bla", s2 = "blabla";
    cout << minim(s1, s2) << "\n";
    return 0;
}


T5) Descrieti cum se poate re-arunca o exceptie: sintaxa, proprietati, restrictii, utilizare. 

- cu throw
- se face cand se vrea reprocesarea unei exceptii din alt punct de vedere
- e try in try si primul throw x iar in primul catch se face throw si se prinde in al doilea catch

Exemplu:

try {
	if (x < 0) {
		try {
			if (x % 2 == 0)
				throw 1;
		}
		catch(int) {
			throw;
		}
	}
}
catch(int) {
	...
}


T6) Sa se scrie cod pentru urmatoarea situatie:
sa se construiasca o clasa CLS care sa aibe ca date de instanta cel putin doi intregi unul constant c si unul normal i.
se citeste n de la tastatura (va fi intotdeuna mai mare decat 10)
sa se instantieze n obiecte din aceasta clasa CLS cu restrictiile urmatoare:
1. primele 3 obiecte vor avea initializate c si i cu c=2 si i=3
2. obiectele de la 5 la 6 vor avea c si i la valoarea 1
3. obiectele de la 7 la n vor avea c=numarul obiectului respectiv, i va fi n-c, adica al optulea obiect va avea c=8, al noualea obiect va avea c=9, etc.
Sa se descrie notiunea de POO care va ajuta sa rezolvati restrictiile 1,2,3 

#include <iostream>
#include <vector>
using namespace std;

class cls {
	const int c;
	int i;
public:
	cls(const int a = 0, int b = 0): c(a), i(b) {}
	friend ostream& operator<<(ostream& out, const cls& obj) {
		out << "c =  " << obj.c << ", i = " << obj.i << "\n";
		return out;
	}
};

int main() {
	int n;
	bool ok = 0;
	while (!ok) {
		try {
			cout << "n: ";
			cin >> n;
			if (n <= 10)
				throw n;
			ok = 1;
		}
		catch(int) {
			cout << "numar invalid, incercati din nou\n";
		}
	}
	
	vector <cls> v;
	for (int i = 0; i < n; i ++) {
		if (i < 3)
			v.push_back(*(new cls(2, 3)));
		else if (i == 5 || i == 6)
			v.push_back(*(new cls(1, 1)));
		else if (i >= 7)
			v.push_back(*(new cls(i, n-i)));
		else
			v.push_back(*(new cls()));
	}
	
	for (int i = 0; i < n; i ++)
		cout << v[i];
		
	return 0;
}